/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, FunctionResult, BamlCtxManager, Image, Audio, ClientRegistry, Collector } from "@boundaryml/baml"
import { toBamlError, type HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check, RecursivePartialNull as MovedRecursivePartialNull } from "./types"
import type * as types from "./types"
import type {Resume} from "./types"
import type TypeBuilder from "./type_builder"
import { HttpRequest, HttpStreamRequest } from "./sync_request"
import { LlmResponseParser, LlmStreamParser } from "./parser"
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

/**
 * @deprecated Use RecursivePartialNull from 'baml_client/types' instead.
 * Example:
 * ```ts
 * import { RecursivePartialNull } from './baml_client/types'
 * ```
 */
export type RecursivePartialNull<T> = MovedRecursivePartialNull<T>;

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  collector?: Collector | Collector[]
}

export class BamlSyncClient {
  private httpRequest: HttpRequest
  private httpStreamRequest: HttpStreamRequest
  private llmResponseParser: LlmResponseParser
  private llmStreamParser: LlmStreamParser
  private bamlOptions: BamlCallOptions

  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager, private bamlOptions?: BamlCallOptions) {
    this.httpRequest = new HttpRequest(runtime, ctxManager)
    this.httpStreamRequest = new HttpStreamRequest(runtime, ctxManager)
    this.llmResponseParser = new LlmResponseParser(runtime, ctxManager)
    this.llmStreamParser = new LlmStreamParser(runtime, ctxManager)
    this.bamlOptions = bamlOptions || {}
  }

  withOptions(bamlOptions: BamlCallOptions) {
    return new BamlSyncClient(this.runtime, this.ctxManager, bamlOptions)
  }

  /*
  * @deprecated NOT IMPLEMENTED as streaming must by async. We
  * are not providing an async version as we want to reserve the
  * right to provide a sync version in the future.
  */
  get stream() {
    throw new Error("stream is not available in BamlSyncClient. Use `import { b } from 'baml_client/async_client")
  }

  get request() {
    return this.httpRequest
  }

  get streamRequest() {
    return this.httpStreamRequest
  }

  get parse() {
    return this.llmResponseParser
  }

  get parseStream() {
    return this.llmStreamParser
  }

  
  AnthropicCompletion(
      prompt: string,
      __baml_options__?: BamlCallOptions
  ): string {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "AnthropicCompletion",
        {
          "prompt": prompt
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ClinicalDecisionSupport(
      clinical_scenario: string,patient_data: string,treatment_options: string[],
      __baml_options__?: BamlCallOptions
  ): string {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "ClinicalDecisionSupport",
        {
          "clinical_scenario": clinical_scenario,"patient_data": patient_data,"treatment_options": treatment_options
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ExtractResume(
      resume: string,
      __baml_options__?: BamlCallOptions
  ): Resume {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "ExtractResume",
        {
          "resume": resume
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as Resume
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  LiteratureSearch(
      research_query: string,medical_domain: string,time_period: string,
      __baml_options__?: BamlCallOptions
  ): string {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "LiteratureSearch",
        {
          "research_query": research_query,"medical_domain": medical_domain,"time_period": time_period
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  MedicalAnalysis(
      patient_data: string,symptoms: string,medical_history: string,
      __baml_options__?: BamlCallOptions
  ): string {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "MedicalAnalysis",
        {
          "patient_data": patient_data,"symptoms": symptoms,"medical_history": medical_history
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  PopulationRiskAnalysis(
      population_data: string,demographic_factors: string,environmental_factors: string,
      __baml_options__?: BamlCallOptions
  ): string {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "PopulationRiskAnalysis",
        {
          "population_data": population_data,"demographic_factors": demographic_factors,"environmental_factors": environmental_factors
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ResearchSynthesis(
      papers: string[],research_question: string,
      __baml_options__?: BamlCallOptions
  ): string {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "ResearchSynthesis",
        {
          "papers": papers,"research_question": research_question
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  RiskModeling(
      patient_profile: string,risk_factors: string[],outcome_target: string,
      __baml_options__?: BamlCallOptions
  ): string {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "RiskModeling",
        {
          "patient_profile": patient_profile,"risk_factors": risk_factors,"outcome_target": outcome_target
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  SimpleCompletion(
      prompt: string,
      __baml_options__?: BamlCallOptions
  ): string {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "SimpleCompletion",
        {
          "prompt": prompt
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
}

export const b = new BamlSyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)