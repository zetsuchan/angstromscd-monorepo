/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { Audio, BamlCtxManager, BamlRuntime, ClientRegistry, Image } from "@boundaryml/baml"
import { type HTTPRequest, toBamlError } from "@boundaryml/baml";
import type TypeBuilder from "./type_builder";
import type { Check, Checked } from "./types";
import type * as types from "./types";
import type { Citation, MedicalInsight, Resume } from "./types";

type BamlCallOptions = {
	tb?: TypeBuilder;
	clientRegistry?: ClientRegistry;
	env?: Record<string, string | undefined>;
};

export class AsyncHttpRequest {
	constructor(
		private runtime: BamlRuntime,
		private ctxManager: BamlCtxManager,
	) {}

	async AnthropicCompletion(
		prompt: string,
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"AnthropicCompletion",
				{
					prompt: prompt,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				false,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}

	async ClinicalDecisionSupport(
		clinical_scenario: string,
		patient_data: string,
		treatment_options: string[],
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"ClinicalDecisionSupport",
				{
					clinical_scenario: clinical_scenario,
					patient_data: patient_data,
					treatment_options: treatment_options,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				false,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}

	async ExtractResume(
		resume: string,
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"ExtractResume",
				{
					resume: resume,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				false,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}

	async LiteratureSearch(
		research_query: string,
		medical_domain: string,
		time_period: string,
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"LiteratureSearch",
				{
					research_query: research_query,
					medical_domain: medical_domain,
					time_period: time_period,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				false,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}

	async MedicalAnalysis(
		patient_data: string,
		symptoms: string,
		medical_history: string,
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"MedicalAnalysis",
				{
					patient_data: patient_data,
					symptoms: symptoms,
					medical_history: medical_history,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				false,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}

	async MedicalResearcher(
		query: string,
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"MedicalResearcher",
				{
					query: query,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				false,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}

	async PopulationRiskAnalysis(
		population_data: string,
		demographic_factors: string,
		environmental_factors: string,
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"PopulationRiskAnalysis",
				{
					population_data: population_data,
					demographic_factors: demographic_factors,
					environmental_factors: environmental_factors,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				false,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}

	async ResearchSynthesis(
		papers: string[],
		research_question: string,
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"ResearchSynthesis",
				{
					papers: papers,
					research_question: research_question,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				false,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}

	async RiskModeling(
		patient_profile: string,
		risk_factors: string[],
		outcome_target: string,
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"RiskModeling",
				{
					patient_profile: patient_profile,
					risk_factors: risk_factors,
					outcome_target: outcome_target,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				false,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}

	async SimpleCompletion(
		prompt: string,
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"SimpleCompletion",
				{
					prompt: prompt,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				false,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}
}

export class AsyncHttpStreamRequest {
	constructor(
		private runtime: BamlRuntime,
		private ctxManager: BamlCtxManager,
	) {}

	async AnthropicCompletion(
		prompt: string,
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"AnthropicCompletion",
				{
					prompt: prompt,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				true,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}

	async ClinicalDecisionSupport(
		clinical_scenario: string,
		patient_data: string,
		treatment_options: string[],
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"ClinicalDecisionSupport",
				{
					clinical_scenario: clinical_scenario,
					patient_data: patient_data,
					treatment_options: treatment_options,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				true,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}

	async ExtractResume(
		resume: string,
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"ExtractResume",
				{
					resume: resume,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				true,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}

	async LiteratureSearch(
		research_query: string,
		medical_domain: string,
		time_period: string,
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"LiteratureSearch",
				{
					research_query: research_query,
					medical_domain: medical_domain,
					time_period: time_period,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				true,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}

	async MedicalAnalysis(
		patient_data: string,
		symptoms: string,
		medical_history: string,
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"MedicalAnalysis",
				{
					patient_data: patient_data,
					symptoms: symptoms,
					medical_history: medical_history,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				true,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}

	async MedicalResearcher(
		query: string,
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"MedicalResearcher",
				{
					query: query,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				true,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}

	async PopulationRiskAnalysis(
		population_data: string,
		demographic_factors: string,
		environmental_factors: string,
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"PopulationRiskAnalysis",
				{
					population_data: population_data,
					demographic_factors: demographic_factors,
					environmental_factors: environmental_factors,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				true,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}

	async ResearchSynthesis(
		papers: string[],
		research_question: string,
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"ResearchSynthesis",
				{
					papers: papers,
					research_question: research_question,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				true,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}

	async RiskModeling(
		patient_profile: string,
		risk_factors: string[],
		outcome_target: string,
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"RiskModeling",
				{
					patient_profile: patient_profile,
					risk_factors: risk_factors,
					outcome_target: outcome_target,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				true,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}

	async SimpleCompletion(
		prompt: string,
		__baml_options__?: BamlCallOptions,
	): Promise<HTTPRequest> {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return await this.runtime.buildRequest(
				"SimpleCompletion",
				{
					prompt: prompt,
				},
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				true,
				env,
			);
		} catch (error) {
			throw toBamlError(error);
		}
	}
}
