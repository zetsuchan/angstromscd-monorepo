/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { Audio, BamlCtxManager, BamlRuntime, ClientRegistry, Collector, Image } from "@boundaryml/baml"
import { toBamlError } from "@boundaryml/baml";
import type { partial_types } from "./partial_types";
import type TypeBuilder from "./type_builder";
import type { Check, Checked } from "./types";
import type * as types from "./types";
import type { Citation, MedicalInsight, Resume } from "./types";

export class LlmResponseParser {
	constructor(
		private runtime: BamlRuntime,
		private ctxManager: BamlCtxManager,
	) {}

	AnthropicCompletion(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): string {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"AnthropicCompletion",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as string;
		} catch (error) {
			throw toBamlError(error);
		}
	}

	ClinicalDecisionSupport(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): string {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"ClinicalDecisionSupport",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as string;
		} catch (error) {
			throw toBamlError(error);
		}
	}

	ExtractResume(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): Resume {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"ExtractResume",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as Resume;
		} catch (error) {
			throw toBamlError(error);
		}
	}

	LiteratureSearch(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): string {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"LiteratureSearch",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as string;
		} catch (error) {
			throw toBamlError(error);
		}
	}

	MedicalAnalysis(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): string {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"MedicalAnalysis",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as string;
		} catch (error) {
			throw toBamlError(error);
		}
	}

	MedicalResearcher(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): MedicalInsight {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"MedicalResearcher",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as MedicalInsight;
		} catch (error) {
			throw toBamlError(error);
		}
	}

	PopulationRiskAnalysis(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): string {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"PopulationRiskAnalysis",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as string;
		} catch (error) {
			throw toBamlError(error);
		}
	}

	ResearchSynthesis(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): string {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"ResearchSynthesis",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as string;
		} catch (error) {
			throw toBamlError(error);
		}
	}

	RiskModeling(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): string {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"RiskModeling",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as string;
		} catch (error) {
			throw toBamlError(error);
		}
	}

	SimpleCompletion(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): string {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"SimpleCompletion",
				llmResponse,
				false,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as string;
		} catch (error) {
			throw toBamlError(error);
		}
	}
}

export class LlmStreamParser {
	constructor(
		private runtime: BamlRuntime,
		private ctxManager: BamlCtxManager,
	) {}

	AnthropicCompletion(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): string {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"AnthropicCompletion",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as string;
		} catch (error) {
			throw toBamlError(error);
		}
	}

	ClinicalDecisionSupport(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): string {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"ClinicalDecisionSupport",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as string;
		} catch (error) {
			throw toBamlError(error);
		}
	}

	ExtractResume(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): partial_types.Resume {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"ExtractResume",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as partial_types.Resume;
		} catch (error) {
			throw toBamlError(error);
		}
	}

	LiteratureSearch(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): string {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"LiteratureSearch",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as string;
		} catch (error) {
			throw toBamlError(error);
		}
	}

	MedicalAnalysis(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): string {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"MedicalAnalysis",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as string;
		} catch (error) {
			throw toBamlError(error);
		}
	}

	MedicalResearcher(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): partial_types.MedicalInsight {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"MedicalResearcher",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as partial_types.MedicalInsight;
		} catch (error) {
			throw toBamlError(error);
		}
	}

	PopulationRiskAnalysis(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): string {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"PopulationRiskAnalysis",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as string;
		} catch (error) {
			throw toBamlError(error);
		}
	}

	ResearchSynthesis(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): string {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"ResearchSynthesis",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as string;
		} catch (error) {
			throw toBamlError(error);
		}
	}

	RiskModeling(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): string {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"RiskModeling",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as string;
		} catch (error) {
			throw toBamlError(error);
		}
	}

	SimpleCompletion(
		llmResponse: string,
		__baml_options__?: { tb?: TypeBuilder; clientRegistry?: ClientRegistry },
	): string {
		try {
			const env = __baml_options__?.env
				? { ...process.env, ...__baml_options__.env }
				: { ...process.env };
			return this.runtime.parseLlmResponse(
				"SimpleCompletion",
				llmResponse,
				true,
				this.ctxManager.cloneContext(),
				__baml_options__?.tb?.__tb(),
				__baml_options__?.clientRegistry,
				env,
			) as string;
		} catch (error) {
			throw toBamlError(error);
		}
	}
}
