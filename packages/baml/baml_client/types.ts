/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: please do not edit it. Instead, edit the
// BAML files and re-generate this code using: baml-cli generate
// You can install baml-cli with:
//  $ npm install @boundaryml/baml
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code

import type { Image, Audio } from "@boundaryml/baml"
/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}

export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export enum ToolType {
  E2B_CODE_INTERPRETER = "E2B_CODE_INTERPRETER",
  PUBMED_SEARCH = "PUBMED_SEARCH",
  PERPLEXITY_SEARCH = "PERPLEXITY_SEARCH",
  EXA_SEARCH = "EXA_SEARCH",
}

export interface ChatResponseWithTools {
  message: string
  requires_tools: boolean
  tool_calls: ToolCall[]
  citations: Citation[]
  
}

export interface Citation {
  title: string
  authors: string[]
  journal: string
  year: number
  pmid?: string | null
  doi?: string | null
  relevance_score: number
  
}

export interface E2BCodeRequest {
  code: string
  description: string
  packages: string[]
  expected_output: string
  
}

export interface MedicalChatResponse {
  message: string
  requires_tools: boolean
  tool_calls: ToolCall[]
  medical_context?: MedicalContext | null
  suggestions: string[]
  
}

export interface MedicalContext {
  condition?: string | null
  severity?: string | null
  treatment_options: string[]
  key_considerations: string[]
  requires_literature: boolean
  
}

export interface MedicalInsight {
  summary: string
  key_findings: string[]
  citations: Citation[]
  recommendations: string[]
  confidence_level: string
  
}

export interface Resume {
  name: string
  email: string
  experience: string[]
  skills: string[]
  
}

export interface Tool {
  type: ToolType
  name: string
  description: string
  
}

export interface ToolCall {
  tool: ToolType
  arguments: string
  reasoning: string
  
}
